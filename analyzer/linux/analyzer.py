import subprocess
import logging
import sys
import xmlrpclib
import traceback
from datetime import datetime
import os
import time
import pkgutil

from lib.core.config import Config
from lib.core.startup import create_folders, init_logging
from lib.common.abstracts import Auxiliary
from modules import auxiliary


class CuckooPackageError(Exception):
    pass


class Analyzer:
    def __init__(self):
        self.config = None
        self.target = None

    def prepare(self):
        """Prepare env for analysis."""

        # Create the folders used for storing the results.
        create_folders()

        # Initialize logging.
        init_logging()

        # Parse the analysis configuration file generated by the agent.
        self.config = Config(cfg="analysis.conf")

        # Set virtual machine clock.
        clock = datetime.strptime(self.config.clock, "%Y%m%dT%H:%M:%S")

        # Setting date and time.
        subprocess.call(['echo', 'date', clock.strftime("%m-%d-%y")])
        subprocess.call(['echo', 'time', clock.strftime("%H:%M:%S")])

        Auxiliary()
        prefix = auxiliary.__name__ + "."
        for loader, name, ispkg in pkgutil.iter_modules(auxiliary.__path__, prefix):
            if ispkg:
                continue
            # Import the auxiliary module.
            try:
                __import__(name, globals(), locals(), ["dummy"], -1)
            except ImportError as e:
                log.warning("Unable to import the auxiliary module "
                            "\"%s\": %s", name, e)

        # Walk through the available auxiliary modules.
        aux_enabled, aux_avail = [], []
        for module in Auxiliary.__subclasses__():
            # Try to start the auxiliary module.
            try:
                aux = module(self.config.get_options())
                aux_avail.append(aux)
                aux.start()
                print "SCREENSHOT!"
            except (NotImplementedError, AttributeError):
                log.warning("Auxiliary module %s was not implemented",
                            aux.__class__.__name__)
                continue
            except Exception as e:
                log.warning("Cannot execute auxiliary module %s: %s",
                            aux.__class__.__name__, e)
                continue
            finally:
                log.debug("Started auxiliary module %s",
                          aux.__class__.__name__)
                aux_enabled.append(aux)

        time.sleep(5)

        # We update the target according to its category. If it's a file, then
        # we store the path.
        print self.config.file_name

        if self.config.category == "file":
            self.target = os.path.join('/home/nidzo/tmp', str(self.config.file_name))
        # If it's a URL, well.. we store the URL.
        else:
            self.target = self.config.target

        return self.target

    def start(self, path):
        print path
        time.sleep(5)
        proc = subprocess.Popen(['/bin/sh', path])
        print "PID:", proc.pid
        print "Return code:", proc.wait()
        time.sleep(5)
        return True


def run():
    print "Printing inside guest machine"
    # subprocess.call(['sudo', 'sysdig', '-w', '/home/nidzo/trace.scap'])
    subprocess.call(['sudo', 'sysdig'])

if __name__ == "__main__":
    # run()
    success = False
    error = ""
    log = logging.getLogger()

    try:
        analyzer = Analyzer()
        target = analyzer.prepare()
        print 'TARGET: ', target
        success = analyzer.start(target)

    # This is not likely to happen.
    except KeyboardInterrupt:
        error = "Keyboard Interrupt"

    # If the analysis process encountered a critical error, it will raise a
    # CuckooError exception, which will force the termination of the analysis.
    # Notify the agent of the failure. Also catch unexpected exceptions.
    except Exception as e:
        # Store the error.
        error_exc = traceback.format_exc()
        error = str(e)

        # Just to be paranoid.
        if len(log.handlers):
            log.exception(error_exc)
        else:
            sys.stderr.write("{0}\n".format(error_exc))

    finally:
        server = xmlrpclib.Server("http://127.0.0.1:8000")
        server.complete(success, error, '/home')
